#!/bin/bash

# Function to execute a command and capture its output
execute_command() {
    echo -e "\nCommand: $1"
    eval $1
}

# Obtain the OS version, architecture, and hostname
os_version=$(grep -oP '(?<=^VERSION_ID=").+(?=")' /etc/os-release)
architecture=$(uname -m)
hostname=$(hostname -f)

# Determine the environment and set the activation key
if [[ $hostname == *"prd"* ]] || [[ $hostname == *"dr"* ]]; then
    environment="prod"
else
    environment="test"
fi

# Construct a key selector based on the OS version, environment, and architecture
key_selector="${environment}_${os_version}_${architecture}"

case "$key_selector" in
    prod_7_x86_64)
        activationkey="Prod7x86_64ActivationKey"
        ;;
    prod_7_ppc64le)
        activationkey="Prod7ppc64leActivationKey"
        ;;
    prod_6_x86_64)
        activationkey="Prod6x86_64ActivationKey"
        ;;
    prod_6_ppc64le)
        activationkey="Prod6ppc64leActivationKey"
        ;;
    test_7_x86_64)
        activationkey="Test7x86_64ActivationKey"
        ;;
    test_7_ppc64le)
        activationkey="Test7ppc64leActivationKey"
        ;;
    test_6_x86_64)
        activationkey="Test6x86_64ActivationKey"
        ;;
    test_6_ppc64le)
        activationkey="Test6ppc64leActivationKey"
        ;;
    *)
        echo "Unsupported OS version, environment or architecture."
        exit 1
        ;;
esac

# Set organization, and repositories based on OS version and architecture
org="PLACEHOLDER"
repo_selector="${os_version}_${architecture}"

case "$repo_selector" in
    7_x86_64)
        repos=("repo1" "repo2" "repo3")
        ;;
    7_ppc64le)
        repos=("repo4" "repo5" "repo6")
        ;;
    6_x86_64)
        repos=("repo7" "repo8" "repo9")
        ;;
    6_ppc64le)
        repos=("repo10" "repo11" "repo12")
        ;;
    *)
        echo "Unsupported OS version or architecture."
        exit 1
        ;;
esac

# Create a temporary file to capture command output
output_file=$(mktemp)

# Execute each command, capturing output to the temporary file
{
    execute_command "subscription-manager remove --all"
    execute_command "subscription-manager unregister"
    execute_command "subscription-manager clean"
    execute_command "subscription-manager register --name=\"$hostname\" --org=\"$org\" --activationkey=\"$activationkey\" --force"
    execute_command "subscription-manager refresh"
    for repo in "${repos[@]}"; do
        execute_command "subscription-manager repos --enable=\"$repo\""
    done
    execute_command "subscription-manager refresh"
    execute_command "yum clean all"
} >> "$output_file" 2>&1

# Handle the yum check-update command separately to format the output as desired
echo -e "\nCommand: yum check-update" >> "$output_file"
yum_output=$(yum check-update)
package_count=$(echo "$yum_output" | grep -E '^.+\.x86_64|noarch' | wc -l)
if [[ $package_count -gt 3 ]]; then
    echo "$yum_output" | grep -E '^.+\.x86_64|noarch' | head -n 3 >> "$output_file"
    echo "And $(($package_count - 3)) more packages." >> "$output_file"
else
    echo "$yum_output" | grep -E '^.+\.x86_64|noarch' >> "$output_file"
fi

# Display the captured output
cat "$output_file"

# Clean up by removing the temporary file
rm "$output_file"